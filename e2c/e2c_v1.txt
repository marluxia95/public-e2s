@name E2C v1
@inputs Screen:wirelink HDD:array RAM_OUT Read Write Load ROM_OUT
@outputs RAM_AW RAM_AR RAM_DAT RAM_Clk Code:array Current:string
@persist Num IsRead AddressOffset X Y Recv Code:array Pos SkipElse Foreground Background Blink Address MaxAddr DataToWrite:string

# HDD R/W Stuff
@outputs IsWriting IsReading HDD_Data:array 

# RAM STUFF
@persist RAM_IsWriting RAM_IsReading RAM_Data:array V_RAM:array

# ROM STUFF
@persist DataToUpload:array ROM_DATA ROM_W_ADDRESS ROM_EXEC_OUT:array XX YY

# Serial STUFF
@outputs Data_Output:array 

@trigger 



DataToUpload = DataToWrite:explode(" ")
#
# Screen Utils
#
if(first()){
    Foreground = 999
    Background = 0
    Blink = 0 
    V_RAM = array()
    Address = 1  
    MaxAddr = 64 # Size of RAM
}
function scr_reset(){
    Screen["Reset", number] = 1
    timer("Done_rst", 100)
}
function scr_write(String:string){
    Screen:writeString(String,1,Num+2,Foreground,Background,Blink)
    if(String:explode(""):count()>25){
        Num = Num + 2
    }else{
        Num++
    }
}

function err_write(String:string){
    Screen:writeString(String,1,3,900,0,1)
    if(String:explode(""):count()>25){
        Num = Num + 2
    }else{
        Num++
    }
}

if(clk("Done_rst")){ Screen["Reset", number] = 0 }

if(first()|duped()){
    scr_reset()
    X = 0
    Y = 0
    AddressOffset = 0
}

#
# // Start screen //
#

Screen:writeString("E2C Processor Test",1,1,9,999,0)


#
# // RAM writing //
#

function ram_upload(AddressWrite, Data) {
    V_RAM[AddressWrite, number] = Data
}




#
# // RAM reading //
#

function number ram_download(AddressRead) {
    return V_RAM[AddressRead, number]
}

#
# // ROM R/W // 
#

# // ROM WRITING AND READING // 

function rom_write() {
    Data_Output = array(2,0,0,ROM_W_ADDRESS,ROM_DATA)
    print(Data_Output)
    timer("Rom_upload", 400)
}
if(clk("Rom_upload")){
    Data_Output = array(2,1,0,ROM_W_ADDRESS,ROM_DATA)
    
    print(Data_Output)
    timer("Rom_stop_upload", 400)
}
if(clk("Rom_stop_upload")){
    Data_Output = array(2,0,0,0,0)
}

#DataToUpload = array(128, 4, 69, 50, 67, 32, 66, 73, 79, 83, 32, 118, 32, 46, 49, 5, 6)

if(clk("rom_upload") & XX<DataToUpload:count()){
    print(DataToUpload)
    print(DataToUpload[XX, string]:toNumber())
    ROM_DATA = DataToUpload[XX, string]:toNumber()
    ROM_W_ADDRESS = XX
    #scr_write("Uploading " + toString(ROM_DATA) + " to " + toString(ROM_W_ADDRESS))
    print("Uploading " + ROM_DATA + " to " + ROM_W_ADDRESS)
    rom_write()
    XX++
    timer("rom_upload", 1000)

}

if(clk("rom_download")&YY<40){
    Data_Output = array(2,0,YY,0,0)
    print("Reading from " + YY + " : " + ROM_OUT:toString())
    #scr_write("Reading " + toString(YY) + " : " + toString(ROM_OUT))
    if(ROM_OUT != 0){
        ROM_EXEC_OUT:pushString(ROM_OUT:toString())
    }
    YY++
    timer("rom_download", 300)
}

#
# // HDD WRITING //
#

function hdd_write(DataToWrite:array) {
    if(HDD[1, string]=="HDD"){
        HDD_Data = DataToWrite
        timer("WriteModeON", 30)
    }else{
        err_write("R/W Error")
    }

}
if(clk("WriteModeON")){
    HDD_Data[1, number] = 1
    IsWriting = 1
    timer("WriteModeOFF", 60)
}
if(clk("WriteModeOFF")){
    HDD_Data[1, number] = 0
    IsWriting = 0
    
}

#
# // Processor // 
#



function number tonum(){
    local Array = array()
    for(Z=1, 100){
        if(Code[Pos,string] == "1" | Code[Pos,string] == "5"){ break }
        Array[Z,number] = toChar(Code[Pos,string]:toNumber(10)):toNumber(10)
        Pos+=1
        
    }
    local A=0
    for(Z=1,Array:count()){
        local PowerFactor = (Array:count()-Z)
        A+=Array[Z,number]*(10^PowerFactor)
    }
    return A
}
function number op_add(){
    Pos+=1
    if(Code[Pos,string] == "3"){A = tonum()}
    if(Code[Pos,string] == "1"){Pos+=1
        if(Code[Pos,string] == "3"){B = tonum()}}
    return (A+B) 
}
function number op_subtract(){
    Pos+=1
    if(Code[Pos,string] == "3"){A = tonum()}
    if(Code[Pos,string] == "1"){Pos+=1
        if(Code[Pos,string] == "3"){B = tonum()}}
    return (A-B) 
}
function number op_multiply(){
    Pos+=1
    if(Code[Pos,string] == "3"){A = tonum()}
    if(Code[Pos,string] == "1"){Pos+=1
        if(Code[Pos,string] == "3"){B = tonum()}}
    return (A*B) 
}
function number op_divide(){
    Pos+=1
    if(Code[Pos,string] == "3"){A = tonum()}
    if(Code[Pos,string] == "1"){Pos+=1
        if(Code[Pos,string] == "3"){B = tonum()}}
    return (A/B) 
}
function number op_read(){
    print(Code[Pos,string] +" b4@ "+ Pos)
    Pos+=1
    if(Code[Pos,string] == "3"){A = tonum()}
    ram_download(A)
    #Pos+=1
    print(Code[Pos,string] +" @ "+ Pos)
    return (RAM_OUT)
}
function number opcalc(){ # Accounts for all operations automagicly
    if(Code[Pos,string] =="129"){return op_add()}
    if(Code[Pos,string] =="130"){return op_subtract()}
    if(Code[Pos,string] =="131"){return op_multiply()}
    if(Code[Pos,string] =="132"){return op_divide()}
    if(Code[Pos,string] =="144"){return op_read()}
    return 0
}
function number ifop(){
    if(Code[Pos,string] =="129"){return 1}
    if(Code[Pos,string] =="130"){return 1}
    if(Code[Pos,string] =="131"){return 1}
    if(Code[Pos,string] =="132"){return 1}
    if(Code[Pos,string] =="144"){return 1}
    return 0
}

if(first()){
    #128 129 3 53 1 83 78 77 54 5 
    #128 4 72 101 108 108 111 32 116 104 101 114 101 33 5 6
    # IF TEST 0: 135 3 48 5 136 128 4 73 110 115 105 100 101 32 73 102 33 5 6 137 128 4 73 110 115 105 100 101 32 69 108 115 101 33 5 6 138
    # IF TEST 1: 135 3 49 5 136 128 4 73 110 115 105 100 101 32 73 102 33 5 6 137 128 4 73 110 115 105 100 101 32 69 108 115 101 33 5 6 138
    # WAIT TEST: 128 4 87 97 105 116 105 110 103 32 50 32 115 101 99 115 33 5 6 176 3 50 48 48 48 5 6 128 4 68 111 110 101 33 5 6 
    
    # MAKE SURE EVERY LINE HAS A SPACE AT THE END OR A TAB AT THE START TO PREVENT ERRORS!
    DataToWrite = " 128 4 72 101 108 108 111 32 116 104 101 114 101 33 5 6 "
        
    
    DataToWrite = DataToWrite:replace(toChar(10),"")
    DataToWrite = DataToWrite:replace(toChar(-1)," ")
    
    #timer("rom_upload", 1000)

    
    
    Data = array("HDD",DataToWrite)
    
    hdd_write(Data)  
    timer("delay",100)
}

if(clk("delay")){
    scr_write("Start")
    #timer("rom_download", 1000)
    #scr_write("Downloading Data from ROM")
    Code = HDD[2,string]:explode(" ")
    
    Pos = 1 # Position for current instruction
     # Code for current instruction
    
    timer("clock",6500)
}

if(Address < 1){
    Address = 1
}
if(Address > MaxAddr){
    Address = MaxAddr
}

if(clk("clock")){
    
    #print(Code)
    Current = Code[Pos,string]
    
    if(Current == "128"){ # PRNT
        ToPrint = ""
        ToPrint = ""
        Pos+=1
        if(Code[Pos,string]=="4"){
            Pos+=1
            for(Z=1, Code:count()){
                if(Code[Pos,string] == "5"){
                    break
                }
                if(Code[Pos,string] == "6"){
                    err_write("ERROR in PRNT: No EOV before EOI")
                    break
                }
                if(Z>=Pos){
                    ToPrint += toChar(Code[Pos,string]:toNumber(10))
                    Pos+=1
                }
            }
        }
        if(ifop()){
            ToPrint=opcalc():toString()
        }
        scr_write(ToPrint)
        Pos+=1
        if(Code[Pos,string]=="6"){
            Pos+=1
        }else{
            err_write("ERROR in PRNT: Expected EOI")
            print(Code[Pos,string] +" P@P "+ Pos)
        }
    }
    if(toByte(Current) == 10 || toByte(Current) == -1){ # Ignore new lines
        Pos +=1
        #print("Found irrelivant character, ignoring!")
    }
    if(Current =="146"){ #Foreground Colour FCL
        Pos+=1
        if(Code[Pos,string]=="3"){
            Foreground=tonum()
        }
        if(ifop()){
            Foreground=opcalc()
        }
        Pos+=2
    }
    if(Current =="147"){ #Background Colour BCL
        Pos+=1
        if(Code[Pos,string]=="3"){
            Background=tonum()
        }
        if(ifop()){
            Background=opcalc()
        }
        Pos+=2
    }
    if(Current == "140"){ # ADDR
        Pos+=1
        if(Code[Pos,string]=="3"){
            Address=tonum()
        }
        if(ifop()){
            Address=opcalc()
        }
        Pos+=2
        print(Address+"aaa")
    }
    if(Current == "142"){ # SET
        Pos+=1
        A=0
        if(Code[Pos,string]=="3"){
            A=tonum()
        }
        if(ifop()){
            A=opcalc()
        }
        ram_upload(Address,A)
        Pos+=2
        print(Address + "aaa" + A)
    }
    
    
    if(Current =="135"){ #IF
        
        Pos+=1
        if(ifop()){
            A=opcalc()
        }
        if(Code[Pos,string]=="3"){
            A = tonum()
        }
        Pos+=1
        print(Pos+" "+A)
        if(A){
            SkipElse=1
            for (Z=1, 500){
                if(Code[Pos,string]=="136"){
                    print("aayy")
                    break
                }
                Pos+=1
            }
            Pos+=1
            print(Code[Pos,string]+" : "+Pos)
        }else{
            SkipElse=0
            for (Z=1, 500){
                if(Code[Pos,string]=="137" || Code[Pos,string]=="138"){
                    print("aayy")
                    break
                }
                Pos+=1
            }
            Pos+=1
        }
        
    }
    if(Current == "137" & SkipElse){
        for (Z=1, 500){
            if(Code[Pos,string]=="138"){
                print("aayy")
                break
            }
            Pos+=1
        }
        Pos+=1
    }
    if(Current =="145"){ #CLR
        scr_reset()
        Pos+=2
    }
    if(Current == "176"){ # WAIT
        Pos+=1
        if(ifop()){
            Time=opcalc()
        }
        if(Code[Pos,string]=="3"){
            Time = tonum()
        }
        Pos+=2
        timer("clock",Time)
    }
    if(Current == "177"){ # EXEC
        scr_reset()
        Pos = 0
        Code = HDD[2,string]:explode(" ")
        timer("clock",2000)
    }
}









